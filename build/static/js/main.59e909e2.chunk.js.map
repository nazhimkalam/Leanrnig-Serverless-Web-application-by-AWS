{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","loading","setLoading","inputName","setInputName","inputAge","setInputAge","fetchedData","setFetchedData","clicked","setClicked","useEffect","fetchData","a","fetch","then","res","json","catch","err","console","log","response","sort","b","Id","className","src","alt","fontSize","scope","map","data","key","name","age","length","type","value","onChange","e","target","size","onClick","preventDefault","method","headers","Accept","body","JSON","stringify","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8TA+HeA,MA3Hf,WAAgB,IAAD,EACgBC,oBAAS,GADzB,mBACPC,EADO,KACEC,EADF,OAEoBF,mBAAS,IAF7B,mBAEPG,EAFO,KAEIC,EAFJ,OAGkBJ,mBAAS,GAH3B,mBAGPK,EAHO,KAGGC,EAHH,OAIwBN,mBAAS,IAJjC,mBAIPO,EAJO,KAIMC,EAJN,OAKgBR,oBAAS,GALzB,mBAKPS,EALO,KAKEC,EALF,KA+Dd,OAxDAC,qBAAU,WAET,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,sEACMC,MAAM,8DAC3BC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,EAAM,2BAHlB,OACXG,EADW,OAIjBpB,GAAW,GACXM,EACCc,EAASC,MAAK,SAAUV,EAAGW,GAE1B,OAAOX,EAAEY,GAAKD,EAAEC,OAGlBL,QAAQC,IAAIC,GAXK,2CAAH,qDAcfpB,GAAW,GACPO,GACHC,GAAW,GAGZE,IACAN,EAAY,GACZF,EAAa,MACX,CAACK,IAEJW,QAAQC,IAAId,GA+BX,yBAAKmB,UAAU,OACbzB,EACA,yBAAKyB,UAAU,gBACd,yBAAKC,IAAI,+DAA+DC,IAAI,MAG7E,yBAAKF,UAAU,kBACd,wBAAIA,UAAU,eAAd,sBACqB,IACpB,yBAAKA,UAAU,QACb,IACD,kBAAC,IAAD,CAAcG,SAAS,WACjB,KAER,2BAAOH,UAAU,uBAChB,+BACC,4BACC,wBAAII,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SAGF,sCACEvB,QADF,IACEA,OADF,EACEA,EAAawB,KAAI,SAACC,GAAD,OACjB,wBAAIC,IAAKD,EAAKP,IACb,wBAAIK,MAAM,OAAOE,EAAKP,IACtB,4BAAKO,EAAKE,MACV,4BAAKF,EAAKG,SAGZ,4BACC,wBAAIL,MAAM,QAAkB,OAAXvB,QAAW,IAAXA,OAAA,EAAAA,EAAa6B,QAAS,GACvC,4BACC,2BACCC,KAAK,OACLC,MAAOnC,EACPoC,SAAU,SAACC,GAAD,OAAOpC,EAAaoC,EAAEC,OAAOH,WAGzC,4BACC,2BACCI,KAAM,EACNL,KAAK,SACLC,MAAOjC,EACPkC,SAAU,SAACC,GAAD,OAAOlC,EAAYkC,EAAEC,OAAOH,cAM3C,4BAAQD,KAAK,SAASX,UAAU,sCAAsCiB,QA9ErD,SAACH,GACrBA,EAAEI,iBACFxB,QAAQC,IAAIlB,EAAWE,GAGvBS,MAAM,6DAA8D,CACnE+B,OAAQ,OACRC,QAAS,CACRC,OAAQ,mBACR,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAU,CACpBzB,GAAIlB,EAAY6B,OAAS,EACzBF,KAAM/B,EACNgC,IAAK9B,MAQP8C,YAAW,WACVzC,GAAW,KACT,OAsDA,aC1Ge0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.59e909e2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactsIcon from '@material-ui/icons/Contacts';\n\nfunction App() {\n\tconst [loading, setLoading] = useState(true);\n\tconst [inputName, setInputName] = useState('');\n\tconst [inputAge, setInputAge] = useState(0);\n\tconst [fetchedData, setFetchedData] = useState([]);\n\tconst [clicked, setClicked] = useState(false);\n\n\tuseEffect(() => {\n\t\t// have to use a UseEffect for fetching data purposes\n\t\tconst fetchData = async () => {\n\t\t\tconst response = await fetch('https://xl28ge6f91.execute-api.us-east-1.amazonaws.com/dev')\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.catch((err) => console.log(err + ' <---- error message'));\n\t\t\tsetLoading(false);\n\t\t\tsetFetchedData(\n\t\t\t\tresponse.sort(function (a, b) {\n\t\t\t\t\t// sorting the collected data according to the Id\n\t\t\t\t\treturn a.Id - b.Id;\n\t\t\t\t})\n\t\t\t);\n\t\t\tconsole.log(response);\n\t\t};\n\n\t\tsetLoading(true);\n\t\tif (clicked) {\n\t\t\tsetClicked(false);\n\t\t}\n\n\t\tfetchData();\n\t\tsetInputAge(0);\n\t\tsetInputName('');\n\t}, [clicked]);\n\n\tconsole.log(fetchedData);\n\n\t// This functions fires when the submit button is clicked\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tconsole.log(inputName, inputAge);\n\n\t\t// POSTING the entered data\n\t\tfetch('https://xl28ge6f91.execute-api.us-east-1.amazonaws.com/dev', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tId: fetchedData.length + 1,\n\t\t\t\tname: inputName,\n\t\t\t\tage: inputAge,\n\t\t\t}),\n\t\t});\n\n\t\t// This delay is set because we should give some time for the data to be posted into the DynamoDB\n\t\t// Then only the GET function is able to exact the updated data, else if the data sent is not yet\n\t\t// posted then we won't be GETTING the updated data from the DynamoDB\n\n\t\tsetTimeout(() => {\n\t\t\tsetClicked(true);\n\t\t}, 500);\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t{loading ? (\n\t\t\t\t<div className=\"app__loading\">\n\t\t\t\t\t<img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"\" />\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className=\"container mt-5\">\n\t\t\t\t\t<h2 className=\"mb-4 d-flex\">\n\t\t\t\t\t\tDetails of Students{' '}\n\t\t\t\t\t\t<div className=\"ml-2\">\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t<ContactsIcon fontSize=\"large\" />\n\t\t\t\t\t\t</div>{' '}\n\t\t\t\t\t</h2>\n\t\t\t\t\t<table className=\"table table-striped\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th scope=\"col\">ID</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Name</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Age</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{fetchedData?.map((data) => (\n\t\t\t\t\t\t\t\t<tr key={data.Id}>\n\t\t\t\t\t\t\t\t\t<th scope=\"row\">{data.Id}</th>\n\t\t\t\t\t\t\t\t\t<td>{data.name}</td>\n\t\t\t\t\t\t\t\t\t<td>{data.age}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th scope=\"row\">{fetchedData?.length + 1}</th>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tvalue={inputName}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setInputName(e.target.value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tsize={2}\n\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\tvalue={inputAge}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setInputAge(e.target.value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t\t<button type=\"submit\" className=\"btn btn-success btn-lg float-right \" onClick={handleSubmit}>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}