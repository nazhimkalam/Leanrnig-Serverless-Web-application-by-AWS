{"version":3,"sources":["Edit/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Edit","fetchedData","setClicked","Id","useParams","data","useState","inputName","setInputName","inputAge","setInputAge","history","useHistory","useEffect","Sname","age","handleUpdate","e","a","preventDefault","fetch","method","mode","cache","credentials","headers","body","JSON","stringify","parseInt","push","className","for","type","id","placeholder","value","onChange","target","class","onClick","to","App","loading","setLoading","setFetchedData","clicked","fetchData","then","res","json","catch","err","console","log","response","sort","b","src","alt","fontSize","path","scope","map","key","Accept","setTimeout","length","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d979aa5d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Edit.css';\r\nimport '../App.css';\r\nimport { useParams, Link, useHistory } from 'react-router-dom';\r\n\r\nfunction Edit({ fetchedData, setClicked }) {\r\n\tconst { Id } = useParams(); // this will fetch the parameters of the URL\r\n\tconst data = fetchedData[Id - 1]; // Student's details\r\n\r\n\tconst [inputName, setInputName] = useState();\r\n\tconst [inputAge, setInputAge] = useState();\r\n\tconst history = useHistory();\r\n\r\n\tuseEffect(() => {\r\n\t\tsetInputName(data?.Sname);\r\n\t\tsetInputAge(data?.age);\r\n\t}, [data]);\r\n\r\n\tconst handleUpdate = async (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t// UPDATING the entered data\r\n\t\tawait fetch('https://xl28ge6f91.execute-api.us-east-1.amazonaws.com/dev', {\r\n\t\t\tmethod: 'PUT', // *GET, POST, PUT, DELETE, etc.\r\n\t\t\tmode: 'cors', // no-cors, *cors, same-origin\r\n\t\t\tcache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n\t\t\tcredentials: 'same-origin', // include, *same-origin, omit\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tId: parseInt(Id),\r\n\t\t\t\tSname: inputName,\r\n\t\t\t\tage: parseInt(inputAge),\r\n\t\t\t}),\r\n\t\t});\r\n\t\tsetClicked(true);\r\n\t\thistory.push('/');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"card mt-5 p-4 \">\r\n\t\t\t\t\t<form>\r\n\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t<label for=\"name\">\r\n\t\t\t\t\t\t\t\t<h5>Name</h5>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Name\"\r\n\t\t\t\t\t\t\t\tvalue={inputName}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setInputName(e.target.value)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<label for=\"name\">\r\n\t\t\t\t\t\t\t\t<h5>Age</h5>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\tid=\"age\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Age\"\r\n\t\t\t\t\t\t\t\tvalue={inputAge}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setInputAge(e.target.value)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<button className=\"btn btn-warning float-right\" onClick={handleUpdate}>\r\n\t\t\t\t\t\t\tUpdate\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t\t\t<button className=\"btn btn-secondary float-right mr-2\">Back</button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Edit;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport Edit from './Edit/Edit';\r\n\r\nfunction App() {\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [inputName, setInputName] = useState('');\r\n\tconst [inputAge, setInputAge] = useState(0);\r\n\tconst [fetchedData, setFetchedData] = useState([]);\r\n\tconst [clicked, setClicked] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\t// have to use a UseEffect for fetching data purposes\r\n\t\tconst fetchData = async () => {\r\n\t\t\tconst response = await fetch('https://xl28ge6f91.execute-api.us-east-1.amazonaws.com/dev')\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.catch((err) => console.log(err + ' <---- error message'));\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetFetchedData(\r\n\t\t\t\tresponse.sort(function (a, b) {\r\n\t\t\t\t\t// sorting the collected data according to the Id\r\n\t\t\t\t\treturn a.Id - b.Id;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t\tconsole.log(response);\r\n\t\t};\r\n\r\n\t\tsetLoading(true);\r\n\t\tif (clicked) {\r\n\t\t\tsetClicked(false);\r\n\t\t}\r\n\r\n\t\tfetchData();\r\n\t\tsetInputAge(0);\r\n\t\tsetInputName('');\r\n\t}, [clicked]);\r\n\r\n\tconsole.log(fetchedData);\r\n\r\n\t// This functions fires when the submit button is clicked\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconsole.log(inputName, inputAge);\r\n\r\n\t\t// POSTING the entered data\r\n\t\tfetch('https://xl28ge6f91.execute-api.us-east-1.amazonaws.com/dev', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tId: fetchedData.length + 1,\r\n\t\t\t\tSname: inputName,\r\n\t\t\t\tage: inputAge,\r\n\t\t\t}),\r\n\t\t});\r\n\r\n\t\t// This delay is set because we should give some time for the data to be posted into the DynamoDB\r\n\t\t// Then only the GET function is able to exact the updated data, else if the data sent is not yet\r\n\t\t// posted then we won't be GETTING the updated data from the DynamoDB\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetClicked(true);\r\n\t\t}, 800);\r\n\t};\r\n\r\n\t// Handling the DELETE request\r\n\tconst handleDelete = (Id) => {\r\n\t\tfetch('https://xl28ge6f91.execute-api.us-east-1.amazonaws.com/dev', {\r\n\t\t\tmethod: 'DELETE',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tId: Id,\r\n\t\t\t}),\r\n\t\t});\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetClicked(true);\r\n\t\t}, 800);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t{loading ? (\r\n\t\t\t\t<div className=\"app__loading\">\r\n\t\t\t\t\t<img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"\" />\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"container mt-5\">\r\n\t\t\t\t\t<Router>\r\n\t\t\t\t\t\t<h2 className=\"mb-4 d-flex\">\r\n\t\t\t\t\t\t\tDetails of Students\r\n\t\t\t\t\t\t\t<div className=\"ml-2\">\r\n\t\t\t\t\t\t\t\t<ContactsIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</h2>\r\n\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route path=\"/edit/:Id\">\r\n\t\t\t\t\t\t\t\t<Edit fetchedData={fetchedData} setClicked={setClicked} />\r\n\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t<Route path=\"/\">\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<table className=\"table table-striped\">\r\n\t\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">ID</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Name</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Age</th>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\t{fetchedData?.map((data) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr key={data.Id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">{data.Id}</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{data.Sname}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{data.age}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"float-right btn btn-danger mr-2\" onClick={() => handleDelete(data.Id)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link to={`edit/${data.Id}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"float-right btn btn-primary mr-2\">Edit</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">{fetchedData?.length + 1}</th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" value={inputName} onChange={(e) => setInputName(e.target.value)} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={2}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={inputAge}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setInputAge(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-success btn-lg float-right mb-5 mr-3\" onClick={handleSubmit}>\r\n\t\t\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t</Router>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}